{"version":3,"sources":["file:///Users/naushad/SnakesAndLadder1/assets/scripts/TileScript.ts"],"names":["_decorator","Component","Node","TiledMap","Label","tween","Vec3","Prefab","instantiate","UITransform","toDegree","ccclass","property","TileScript","start","tileLayer","tileMap","getLayer","tileCurrPos","getTiledTileAt","node","position","playerOne","setPosition","x","y","playerTwo","to","angle","k","i","startLoop","endLoop","l","ch","prefabLabel","tileNow","getComponent","string","addChild","j","addSnakes","addLadders","onLoad","noOfSnakes","Math","floor","random","console","log","randomStartX","randomStartY","randomEndX","randomEndY","tileNowRandom1","tileNowRandom2","diffX","diffY","lengthOfSnake","sqrt","chil","snake","setContentSize","ang","atan2","noOfLadders","ladder","movePlayer","diceNumber","playerOneTileY","playerOneTileX","nextPos","easing","movePlayer2","playerTwoTileY","playerTwoTileX"],"mappings":"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","sourcesContent":["\r\nimport { _decorator, Component, Node, TiledMap, Vec2, Label, UITransformComponent, TiledTile, TiledLayer, tween, Vec3, computeRatioByType, easing, Prefab, instantiate, size, SpriteFrame, UITransform, toDegree, math } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Predefined variables\r\n * Name = TileScript\r\n * DateTime = Wed Sep 15 2021 11:44:38 GMT+0530 (India Standard Time)\r\n * Author = alokraj0024\r\n * FileBasename = TileScript.ts\r\n * FileBasenameNoExtension = TileScript\r\n * URL = db://assets/scripts/TileScript.ts\r\n * ManualUrl = https://docs.cocos.com/creator/3.3/manual/en/\r\n * Math.floor(Math.random() * (max - min + 1)) + min;\r\n */\r\n \r\n@ccclass('TileScript')\r\nexport class TileScript extends Component {\r\n    \r\n    @property(TiledMap)\r\n    tileMap : TiledMap = null;\r\n\r\n    @property(Node)\r\n    playerOne : Node = null;\r\n\r\n    @property(Node)\r\n    playerTwo : Node = null;\r\n\r\n    @property(Prefab)\r\n    prefabLabel : Prefab = null;\r\n\r\n    @property(Prefab)\r\n    snake : Prefab = null;\r\n\r\n    @property(Prefab)\r\n    ladder : Prefab = null;\r\n\r\n    tileLayer : TiledLayer = null;\r\n    tile : TiledTile = null;\r\n    tileCurrPos : Vec3 = null;\r\n    noOfSix : number = 0;\r\n    playerOneTileX : number = 0;\r\n    playerOneTileY : number = 9;\r\n    playerTwoTileX : number = 0;\r\n    playerTwoTileY : number = 9;\r\n    playerOneinitialPos : Vec3 = null;\r\n    playertwoInitialPos : Vec3 = null;\r\n\r\n    arrayOfSnakesHead : number[] = [];\r\n    arrayOfSnakesTail : number[] = [];\r\n    arrayOfLaddersHead : number[] = [];\r\n    arrayOfLaddersTail : number[] = [];\r\n\r\n    start () {\r\n        this.tileLayer = this.tileMap.getLayer('Tile Layer 1');\r\n        this.tileCurrPos = this.tileLayer.getTiledTileAt(0,9,true).node.position;\r\n\r\n        this.playerOne.setPosition(new Vec3(this.tileCurrPos.x+8,this.tileCurrPos.y+15,0));\r\n        this.playerTwo.setPosition(new Vec3(this.tileCurrPos.x+25,this.tileCurrPos.y+15,0));\r\n        tween(this.playerOne)\r\n            .to(1,{angle : 90})\r\n        let k = 1;\r\n        for(let i = 9;i>=0;i--)\r\n        {\r\n            let startLoop : number = null;\r\n            let endLoop : number = null;\r\n            if(i%2==0)\r\n            {\r\n                for(let l=9;l>=0;l--)\r\n                {\r\n                    let ch = instantiate(this.prefabLabel);\r\n                    let tileNow = this.tileLayer.getTiledTileAt(l,i,true).node.position;\r\n                    ch.getComponent(Label).string = `${k++}`;\r\n                    this.tileMap.node.addChild(ch);\r\n                    ch.setPosition(tileNow.x+10,tileNow.y-8,1);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                for(let j=0;j<=9;j++)\r\n                {\r\n                    let ch = instantiate(this.prefabLabel);\r\n                    let tileNow = this.tileLayer.getTiledTileAt(j,i,true).node.position;\r\n                    ch.getComponent(Label).string = `${k++}`;\r\n                    this.tileMap.node.addChild(ch);\r\n                    ch.setPosition(tileNow.x+10,tileNow.y-8,1);\r\n                }\r\n            }\r\n        }\r\n        this.addSnakes();\r\n        this.addLadders();\r\n    }\r\n\r\n    onLoad()\r\n    {\r\n        //this.node.on(Node.EventType.MOUSE_DOWN, this.movePlayer,this)\r\n    }\r\n    addSnakes()\r\n    {\r\n        let noOfSnakes = Math.floor(Math.random() * (3 - 1 + 1)) + 1;\r\n        console.log(' No of snakes : ' + noOfSnakes);\r\n        for(let i=0;i<noOfSnakes;i++)\r\n        {\r\n            let randomStartX = Math.floor(Math.random() * (9 - 0 + 1)) + 0;\r\n            let randomStartY = Math.floor(Math.random() * (7 - 0 + 1)) + 0;\r\n            console.log('start ' + randomStartX,randomStartY);\r\n\r\n            let randomEndX = Math.floor(Math.random() * (9 - 0 + 1)) + 0;\r\n            let randomEndY = Math.floor(Math.random() * (9 - (randomStartY+2) + 1)) + (randomStartY+2);\r\n            console.log('end ' + randomEndX,randomEndY);\r\n\r\n            let tileNowRandom1 = this.tileLayer.getTiledTileAt(randomStartX,randomStartY,true).node.position;\r\n            let tileNowRandom2 = this.tileLayer.getTiledTileAt(randomEndX,randomEndY,true).node.position;\r\n\r\n            let diffX = tileNowRandom1.x - tileNowRandom2.x;\r\n            let diffY = tileNowRandom1.y - tileNowRandom2.y;\r\n            let lengthOfSnake = Math.sqrt((diffX*diffX)+(diffY*diffY));\r\n\r\n            let chil = instantiate(this.snake);\r\n            this.tileMap.node.addChild(chil);\r\n            chil.setPosition(tileNowRandom1.x+16,tileNowRandom1.y+16,1);\r\n            chil.getComponent(UITransform).setContentSize(20,lengthOfSnake);\r\n            let ang = Math.atan2(diffY,diffX);\r\n            tween(chil)\r\n                .to(1,{angle : toDegree(ang)-90})\r\n                .start();\r\n        }\r\n\r\n    }\r\n    addLadders()\r\n    {\r\n        let noOfLadders = Math.floor(Math.random() * (3 - 1 + 1)) + 1;\r\n        console.log('No of ladders : ' + noOfLadders);\r\n        for(let i=0;i<=noOfLadders;i++)\r\n        {\r\n            let randomStartX = Math.floor(Math.random() * (9 - 0 + 1)) + 0;\r\n            let randomStartY = Math.floor(Math.random() * (7 - 0 + 1)) + 0;\r\n\r\n            let randomEndX = Math.floor(Math.random() * (9 - 1 + 1)) + 1;\r\n            let randomEndY = Math.floor(Math.random() * (9 - (randomStartY+2) + 1)) + randomStartY+2;\r\n\r\n            let tileNowRandom1 = this.tileLayer.getTiledTileAt(randomStartX,randomStartY,true).node.position;\r\n            let tileNowRandom2 = this.tileLayer.getTiledTileAt(randomEndX,randomEndY,true).node.position;\r\n            \r\n            let diffX = tileNowRandom1.x - tileNowRandom2.x;\r\n            let diffY = tileNowRandom1.y - tileNowRandom2.y;\r\n            let lengthOfSnake = Math.sqrt((diffX*diffX)+(diffY*diffY));\r\n\r\n            let chil = instantiate(this.ladder);\r\n            this.tileMap.node.addChild(chil);\r\n            chil.setPosition(tileNowRandom1.x+16,tileNowRandom1.y+16,1);\r\n            chil.getComponent(UITransform).setContentSize(20,lengthOfSnake);\r\n            let ang = Math.atan2(diffY,diffX);\r\n            tween(chil)\r\n                .to(1,{angle : toDegree(ang)-90})\r\n                .start();\r\n        }\r\n    }\r\n    movePlayer()\r\n    {\r\n        // // Math.floor(Math.random() * (max - min + 1)) + min;\r\n         let diceNumber = Math.floor(Math.random() * (6 - 1 + 1)) + 1;\r\n         console.log(diceNumber);\r\n\r\n        if(this.playerOneTileY % 2 == 1)\r\n        {\r\n\r\n            this.playerOneTileX += diceNumber;\r\n            if(this.playerOneTileX > 9)\r\n            {\r\n                this.playerOneTileY -= 1;\r\n                this.playerOneTileX = 10 - (this.playerOneTileX-9);\r\n            }\r\n\r\n            let nextPos = this.tileLayer.getTiledTileAt(this.playerOneTileX,this.playerOneTileY).node.position;\r\n            tween(this.playerOne)\r\n                .to(1.2,{position : new Vec3(nextPos.x+8,nextPos.y+15,1)},{easing : 'sineIn'})\r\n                .start();\r\n            //this.playerOne.setPosition(nextPos.x+8,nextPos.y+15,1);\r\n            console.log(this.playerOneTileX,this.playerOneTileY);\r\n        }\r\n        else\r\n        {\r\n            this.playerOneTileX -= diceNumber;\r\n            if(this.playerOneTileX < 0)\r\n            {\r\n                this.playerOneTileY -= 1;\r\n                this.playerOneTileX = 0 - (this.playerOneTileX)-1;\r\n            }\r\n\r\n            let nextPos = this.tileLayer.getTiledTileAt(this.playerOneTileX,this.playerOneTileY).node.position;\r\n            tween(this.playerOne)\r\n                .to(1.2,{position : new Vec3(nextPos.x+8,nextPos.y+15,1)},{easing : 'sineIn'})\r\n                .start();\r\n            console.log(this.playerOneTileX,this.playerOneTileY);\r\n        }\r\n    }\r\n    movePlayer2()\r\n    {\r\n        // // Math.floor(Math.random() * (max - min + 1)) + min;\r\n         let diceNumber = Math.floor(Math.random() * (6 - 1 + 1)) + 1;\r\n         console.log(diceNumber);\r\n\r\n        if(this.playerTwoTileY % 2 == 1)\r\n        {\r\n\r\n            this.playerTwoTileX += diceNumber;\r\n            if(this.playerTwoTileX > 9)\r\n            {\r\n                this.playerTwoTileY -= 1;\r\n                this.playerTwoTileX = 10 - (this.playerTwoTileX-9);\r\n            }\r\n\r\n            let nextPos = this.tileLayer.getTiledTileAt(this.playerTwoTileX,this.playerTwoTileY).node.position;\r\n            tween(this.playerTwo)\r\n                .to(1.2,{position : new Vec3(nextPos.x+8,nextPos.y+15,1)},{easing : 'sineIn'})\r\n                .start();\r\n            //this.playerOne.setPosition(nextPos.x+8,nextPos.y+15,1);\r\n            console.log(this.playerTwoTileX,this.playerTwoTileY);\r\n        }\r\n        else\r\n        {\r\n            this.playerTwoTileX -= diceNumber;\r\n            if(this.playerTwoTileX < 0)\r\n            {\r\n                this.playerTwoTileY -= 1;\r\n                this.playerTwoTileX = 0 - (this.playerTwoTileX)-1;\r\n            }\r\n\r\n            let nextPos = this.tileLayer.getTiledTileAt(this.playerTwoTileX,this.playerTwoTileY).node.position;\r\n            tween(this.playerTwo)\r\n                .to(1.2,{position : new Vec3(nextPos.x+8,nextPos.y+15,1)},{easing : 'sineIn'})\r\n                .start();\r\n            console.log(this.playerTwoTileX,this.playerTwoTileY);\r\n        }\r\n    }\r\n\r\n}"]}